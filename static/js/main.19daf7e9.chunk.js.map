{"version":3,"sources":["components/__generated__/ContinentsQuery.graphql.js","fetchGraphQL.js","RelayEnvironment.js","components/CountryTile.js","components/ContinentsQuery.js","App.js","serviceWorker.js","index.js","images/Download-World-PNG-Free-Download.png"],"names":["node","v0","v1","v2","hash","module","exports","text","variables","a","fetch","method","headers","Accept","body","JSON","stringify","query","response","json","fetchGraphQL","params","console","log","name","Environment","network","Network","create","store","Store","RecordSource","CountryTile","props","countryData","continentData","countries","find","item","includes","country","className","native","languages","map","language","key","currency","code","svg","phone","ContinentsQuery","Suspense","React","preloadedQuery","preloadQuery","RelayEnvironment","App","data","usePreloadedQuery","useState","setCountry","ContinentCode","setCode","userContinent","setUserContinent","handleClick","continents","onClick","type","src","wrld","alt","title","value","onChange","e","target","AppRoot","environment","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19daf7e9.chunk.js","sourcesContent":["/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type ContinentsQueryVariables = {||};\nexport type ContinentsQueryResponse = {|\n  +continents: ?$ReadOnlyArray<?{|\n    +code: ?string,\n    +countries: ?$ReadOnlyArray<?{|\n      +code: ?string,\n      +name: ?string,\n      +native: ?string,\n      +phone: ?string,\n      +languages: ?$ReadOnlyArray<?{|\n        +name: ?string\n      |}>,\n      +currency: ?string,\n      +emoji: ?string,\n    |}>,\n  |}>\n|};\nexport type ContinentsQuery = {|\n  variables: ContinentsQueryVariables,\n  response: ContinentsQueryResponse,\n|};\n*/\n\n\n/*\nquery ContinentsQuery {\n  continents {\n    code\n    countries {\n      code\n      name\n      native\n      phone\n      languages {\n        name\n      }\n      currency\n      emoji\n    }\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"code\",\n  \"storageKey\": null\n},\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"Continent\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"continents\",\n    \"plural\": true,\n    \"selections\": [\n      (v0/*: any*/),\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"Country\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"countries\",\n        \"plural\": true,\n        \"selections\": [\n          (v0/*: any*/),\n          (v1/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"native\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"phone\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Language\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"languages\",\n            \"plural\": true,\n            \"selections\": [\n              (v1/*: any*/)\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"currency\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"emoji\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ContinentsQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Query\"\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ContinentsQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ContinentsQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ContinentsQuery {\\n  continents {\\n    code\\n    countries {\\n      code\\n      name\\n      native\\n      phone\\n      languages {\\n        name\\n      }\\n      currency\\n      emoji\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '8c9f13e625d664ee9421110623e5c394';\n\nmodule.exports = node;\n","async function fetchGraphQL(text, variables) {\r\n  const response = await fetch(\"https://countries.trevorblades.com/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n      query: text,\r\n      variables\r\n    })\r\n  });\r\n  return await response.json();\r\n}\r\n\r\nexport default fetchGraphQL;\r\n","import { Environment, Network, RecordSource, Store } from \"relay-runtime\";\r\nimport fetchGraphQL from \"./fetchGraphQL\";\r\n\r\n// Relay passes a \"params\" object with the query name and text. So we define a helper function\r\n// to call our fetchGraphQL utility with params.text.\r\nasync function fetchRelay(params, variables) {\r\n  console.log(`fetching query ${params.name}`);\r\n  return fetchGraphQL(params.text, variables);\r\n}\r\n\r\n// Export a singleton instance of Relay Environment configured with our network function:\r\nexport default new Environment({\r\n  network: Network.create(fetchRelay),\r\n  store: new Store(new RecordSource())\r\n});\r\n","import React from \"react\";\r\nimport ReactCountryFlag from \"react-country-flag\";\r\n\r\n\r\nconst CountryTile = props => {\r\n  console.log(props);\r\n  const countryData = props.continentData.countries.find(item => {\r\n    return item.name.includes(props.country);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {props.country && countryData ? (\r\n        <div>\r\n          <p className=\"country-name\">{countryData.name}</p>\r\n          <ul className=\"list\">\r\n            <li>Native name: {countryData.native}</li>\r\n            <li>\r\n            Languages:\r\n              {countryData.languages.map(language => (\r\n                <span key={language.name}> {language.name} </span>\r\n              ))}\r\n            </li>\r\n            <li>Currency: {countryData.currency}</li>\r\n            <li>\r\n              Flag :{\" \"}\r\n              {countryData ? (\r\n                <ReactCountryFlag code={countryData.code} svg />\r\n              ) : null}\r\n            </li>\r\n            <li>Phone: +{countryData.phone}</li>\r\n          </ul>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryTile;\r\n","import graphql from \"babel-plugin-relay/macro\";\r\n\r\nconst ContinentsQuery = graphql`\r\n  query ContinentsQuery {\r\n      continents {\r\n        code\r\n        countries {\r\n          code\r\n          name\r\n          native\r\n          phone\r\n          languages {\r\n            name\r\n          }\r\n          currency\r\n          emoji\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\nexport default ContinentsQuery;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  RelayEnvironmentProvider,\r\n  preloadQuery,\r\n  usePreloadedQuery\r\n} from \"react-relay/hooks\";\r\nimport RelayEnvironment from \"./RelayEnvironment\";\r\nimport wrld from \"./images/Download-World-PNG-Free-Download.png\";\r\nimport CountryTile from \"./components/CountryTile\";\r\nimport ContinentsQuery from \"./components/ContinentsQuery\";\r\n\r\nconst { Suspense } = React;\r\n\r\nconst preloadedQuery = preloadQuery(RelayEnvironment, ContinentsQuery);\r\n\r\nfunction App(props) {\r\n  const data = usePreloadedQuery(ContinentsQuery, props.preloadedQuery, {});\r\n  console.log(data);\r\n\r\n  const [country, setCountry] = useState(\"\");\r\n  const [ContinentCode, setCode] = useState(\"\");\r\n  const [userContinent, setUserContinent] = useState(\"World\");\r\n\r\n  const handleClick = () => {\r\n    if (userContinent === \"World\") {\r\n      setUserContinent(\"Europe\");\r\n      setCode(\"EU\");\r\n    } else if (userContinent === \"Europe\") {\r\n      setUserContinent(\"Asia\");\r\n      setCode(\"AS\");\r\n    } else if (userContinent === \"Asia\") {\r\n      setUserContinent(\"Africa\");\r\n      setCode(\"AF\");\r\n    } else if (userContinent === \"Africa\") {\r\n      setUserContinent(\"North America\");\r\n      setCode(\"NA\");\r\n    } else if (userContinent === \"North America\") {\r\n      setUserContinent(\"South America\");\r\n      setCode(\"SA\");\r\n    } else if (userContinent === \"South America\") {\r\n      setUserContinent(\"Oceania\");\r\n      setCode(\"OC\");\r\n    } else if (userContinent === \"Oceania\") {\r\n      setUserContinent(\"Europe\");\r\n      setCode(\"EU\");\r\n    }\r\n  };\r\n  const continents = data.continents;\r\n  const continentData = continents.find(item => {\r\n    return item.code.includes(ContinentCode);\r\n  });\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>\r\n          Explore\r\n          <div onClick={handleClick} className=\"continent\">\r\n            {userContinent}\r\n          </div>\r\n        </h1>\r\n        <input\r\n          type=\"image\"\r\n          src={wrld}\r\n          className=\"button\"\r\n          alt=\"Go\"\r\n          onClick={handleClick}\r\n          title=\"Click me!\"\r\n        />\r\n      </header>\r\n      <div className=\"country-div\">\r\n        {userContinent === \"World\" ? null : (\r\n          <select\r\n            className=\"input\"\r\n            value={country}\r\n            onChange={e => setCountry(e.target.value)}\r\n          >\r\n            {continentData.countries.map(country => (\r\n              <option className=\"option\" key={country.code} name={country.name}>\r\n                {country.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )}\r\n      </div>\r\n      {userContinent !== \"World\" ? (\r\n        <CountryTile country={country} continentData={continentData} />\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AppRoot(props) {\r\n  return (\r\n    <RelayEnvironmentProvider environment={RelayEnvironment}>\r\n      <Suspense fallback={\"Loading...\"}>\r\n        <App preloadedQuery={preloadedQuery} />\r\n      </Suspense>\r\n    </RelayEnvironmentProvider>\r\n  );\r\n}\r\n\r\nexport default AppRoot;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Download-World-PNG-Free-Download.ef22a519.png\";"],"sourceRoot":""}